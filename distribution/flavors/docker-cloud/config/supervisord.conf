[supervisord]
nodaemon=true

[inet_http_server]
port=:9001

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:evergreen-client]
environment=HOME=%(ENV_EVERGREEN_HOME)s # Needed for Git or Node JENKINS-53856
command=/evergreen/scripts/start-client.sh
directory=%(ENV_EVERGREEN_HOME)s/client
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true
startsecs=2
startretries=20
user=jenkins

[program:jenkins]
command=/evergreen/scripts/jenkins-evergreen.sh
directory=%(ENV_JENKINS_HOME)s
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true
startsecs=10
startretries=0
user=jenkins

[program:nginx]
command=/usr/sbin/nginx -c /evergreen/config/nginx.conf -g "daemon off;"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
redirect_stderr=true
startsecs=10
startretries=0

# The configuration and usage of socat below requires an explanation.
# The intent is to provide an out-of-the-box Evergreen instance able to run  builds using Docker.
# The chosen path for this is to require that the Docker socket be bind-mounted.
#
# As the Jenkins instance user is *not* root, it can not use /var/run/docker.sock by default
# in a typical setup. Because when mounted with `-v /var/run/docker.sock:/var/run/docker.sock` the
# socket will not be writable to the world, and depending on the setup not even readable.
#
# So, there are two paths forward:
# * Either we require that the administrators on the host run `chmod a+rw /var/run/docker.sock`, or
# * we just expose that file as a full TCP socket, listening on the usual 2375 port.
#
# We chose the latter because it seemed less work for the Evergreen users, and hence more in line
# with the overall easiness Jenkins Evergreen aims at providing.
[program:socat]
command=socat -d -d TCP4-LISTEN:2375,fork UNIX-CONNECT:/var/run/docker.sock
startsecs=0
stdout_logfile=/dev/stdout

# vim: ft=ini
